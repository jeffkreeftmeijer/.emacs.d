#+title: Emacs configuration
#+author: Jeff Kreeftmeijer
#+PROPERTY: header-args :tangle default.el

* Vim-style modal editing with Evil

[[https://github.com/emacs-evil/evil][Evil]] is a Vim emulator for that alters Emacs in a way that's familiar to Vim defectors.
I'm unablle to edit files without it, so it's the first thing I install.

Aside from Vim's modal editing through switching between different modes, Evil adds Ex commands like ~:w~ to save the current file, ~/~ to search, and ~:!~ to execute a shell command.
It's an impressively well functioning Vim emulator.[fn:evil]

After installing Evil, turn on =evil-mode= globally:

#+headers: :tangle no
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+end_src

[fn:evil] Although Evil definitely helped me transition to Emacs, I'd like to switch to a different modal editing solution at some point.
Because of Evil's stated purpose as a Vim emulator, it seems like a lot of well-functioning things are reimplemented because they work differently from Vim.
For example, Vim's Ex-style search is added, while Emacs provides a different search implementation through ~<C-s>~ that I don't know how to use.

** Modal editing everywhere

[[https://github.com/emacs-evil/evil-collection][Evil-collection]] adds Evil bindings Emacs features and external packages.

The evil-collection package needs Evil's key bindings to be disabled.
This needs to happen before /either/ of the packages is loaded.
To do that, add an src_emacs-lisp[:exports code]{:init} key to the Evil package declaration to execute before it's loaded:

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+end_src

Then, install evil-collection.

#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :commands
    (evil-collection-eshell-setup evil-collection-magit-setup))
#+end_src

Finally, add Evil-collection by adding an after for each feature or package it provides key bindings for.

#+begin_src emacs-lisp
  (use-package eshell
    :defer t
    :config
    (evil-collection-eshell-setup))
#+end_src

* Magit: an interface for working with Git repositories

[[https://magit.vc][Magit]] is the most comfortable way to use Git.[fn:magit]

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :config
    (evil-collection-magit-setup))
#+end_src

[fn:magit] I'm quite comfortable with Git's CLI in the terminal, so I held off on isntalling Magit even though I've used (and loved) it in the past.
Now, since I'm working on switching from running Emacs in the terminal to running a terminal in Emacs, I ran into the fact that Eshell can't handle Git's interactive modes because it's a dumb terminal.
