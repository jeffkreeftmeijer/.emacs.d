#+title: ~/.emacs.d

* Appearance

** Frames

Disable the scroll bar, the tool bar, and the menu bar:

#+headers: :noweb-ref frame-init
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

#+RESULTS:

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package frame
    :init
    <<frame-init>>)
#+end_src

** Fonts

Use Apple's SF Mono and SF Pro fonts, for fixed and variable fonts, respectively.
Although the fonts are used in macOS, they're not usable without [[https://developer.apple.com/fonts/][downloading]] them first.
Then, set the fonts for the =default=, =fixed-pitch=, and =variable-pitch= faces.
Set the font size to 140 (14 points × 10) for fixed-width fonts, and 170 (17 points × 10) for variable-width ones:

#+headers: :noweb-ref faces-init
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "SF Mono" :height 140)
  (set-face-attribute 'fixed-pitch nil :family "SF Mono" :height 140)
  (set-face-attribute 'variable-pitch nil :family "SF Pro" :height 170)
#+end_src

#+RESULTS:

The =face-cont-family-alternatives= variable is used to provide fallback fonts if the preferred font isn't available.
This configuration falls back to Menlo when SF Mono isn't available, or it defaults to the default monospace font (which is most likely Courier).
SF Pro falls back to Helvetica, then Arial.

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref faces-custom
#+begin_src emacs-lisp
  (face-font-family-alternatives
    '(("SF Mono" "Menlo" "monospace")
      ("SF Pro" "Helvetica" "Arial")))
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (custom-set-variables
    '<<faces-custom>>)
#+end_src

#+RESULTS:

To enable variable-width fonts for non-code text, enable =variable-pitch-mode= when entering text mode:

#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'variable-pitch-mode))
#+end_src

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref faces-hook
#+begin_src emacs-lisp
  (text-mode . variable-pitch-mode)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package faces
    :init
    <<faces-init>>
    :custom
    <<faces-custom>>
    :hook
    <<faces-hook>>)
#+end_src

#+RESULTS:
| variable-pitch-mode | text-mode-hook-identify |

** Themes

The [[https://protesilaos.com/emacs/modus-themes][Modus themes]] are a set of beautiful and customizable themes, which are shipped with Emacs since version 28.

The modus themes consist of two types: Modus Operandi is a light theme, and Modus Vivendi is its dark counterpart.
The tinted variants shift the background colors from white and black to a more pleasant light ochre and dark blue.

To select =modus-operandi-tinted= as the default theme, load it with the ~load-theme~ function:

#+headers: :noweb-ref modus-themes-init
#+begin_src emacs-lisp
  (load-theme 'modus-operandi-tinted)
#+end_src

#+RESULTS:
: t

An interactive function named ~modus-themes-toggle~ switches between the light and dark themes.
By default, the function switches between the non-tinted versions, but that can be overwritten to use the tinted versions through the =modus-themes-to-toggle= variable:

#+headers: :exports none
#+headers: :noweb-ref modus-themes-custom
#+begin_src emacs-lisp
  modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (setq <<modus-themes-custom>>)
#+end_src

#+RESULTS:
| modus-operandi-tinted | modus-vivendi-tinted |

The Modus themes can optionally inherit from the =fixed-pitch= face for some faces, which allows for turning on =variable-pitch-mode= while keeping some text monospaced.
To turn it on, set =modus-themes-mixed-fonts=, but make sure it's set before loading one of the modus themes:

#+headers: :noweb-ref mixed-fonts
#+begin_src emacs-lisp
  (setq modus-themes-mixed-fonts t)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    <<mixed-fonts>>
    <<modus-themes-init>>
    :custom
    <<modus-themes-custom>>)
#+end_src

#+RESULTS:

** Layout

The [[https://protesilaos.com/emacs/spacious-padding][spacious-padding]] package adds spacing around windows and frames, as well as padding the mode line.

Turn on =spacious-padding-mode= to add spacing around windows and frames:

#+headers: :noweb-ref spacious-padding-init
#+begin_src emacs-lisp
  (spacious-padding-mode 1)
#+end_src

Turn on  =spacious-padding-subtile-mode-line= for a more subtile mode line:

#+headers: :exports none
#+headers: :noweb-ref spacious-padding-custom
#+begin_src emacs-lisp
  spacious-padding-subtle-mode-line t
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  (setq <<spacious-padding-custom>>)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package spacious-padding
    :init
    <<spacious-padding-init>>
    :custom
    <<spacious-padding-custom>>)
#+end_src

#+RESULTS:

* Modal editing

** Evil mode

Emacs is the best Vim emulator, and [[https://github.com/emacs-evil/evil][Evil]] is the best Vim mode.
After installing Evil, turn on =evil-mode= globally:

#+headers: :noweb-ref evil-init
#+begin_src emacs-lisp
  (evil-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package evil
    :init
    <<evil-want-keybinding>>
    <<evil-init>>)
#+end_src

#+RESULTS:

** Evil-collection

For Vim-style key bindings to work everywhere (like magit, eshell, dired and [[https://github.com/emacs-evil/evil-collection/tree/master/modes][many more]]), add [[https://github.com/emacs-evil/evil-collection][evil-collection]].
Initialize it by calling ~evil-collection-init~:

#+headers: :noweb-ref evil-collection-config
#+begin_src emacs-lisp
  (evil-collection-init)
#+end_src

#+RESULTS:

Evil-collection [[https://github.com/emacs-evil/evil-collection/issues/60][requires =evil-want-keybinding= to be unset]] before either Evil or evil-collection are loaded:

#+headers: :noweb-ref evil-want-keybinding
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    <<evil-collection-config>>)
#+end_src

#+RESULTS:
: t

** Evil-commentary

[[https://github.com/linktohack/evil-commentary][Evil-commentary]] is an Evil port of [[https://github.com/tpope/vim-commentary][vim-commentary]] which adds key bindings to call Emacs’ built in ~comment-or-uncomment-region~ function.
Turn it on by calling ~evil-commentary-mode~:

#+headers: :noweb-ref evil-commentary-init
#+begin_src emacs-lisp
  (evil-commentary-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package evil-commentary
    :after evil
    :init
    <<evil-commentary-init>>)
#+end_src

* Completion

** Vertical completion

[[https://github.com/minad/vertico][Vertico]] is a vertical completion library, based on Emacs' default completion system.

#+headers: :noweb-ref vertico-init
#+begin_src emacs-lisp
  (vertico-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package vertico
    :init
    <<vertico-init>>)
#+end_src

#+RESULTS:

** Contextual information

[[https://github.com/minad/marginalia][Marginalia]] adds extra contextual information to minibuffer completions.
For example, besides just showing command names when executing =M-x=, the package adds a description of the command and the key binding.

#+headers: :noweb-ref marginalia-init
#+begin_src emacs-lisp
  (marginalia-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    <<marginalia-init>>)
#+end_src

#+RESULTS:
: t

** Enhanced navigation commands

[[https://github.com/minad/consult][Consult]] provides enhancements to built-in search and navigation commands.
There is [[https://github.com/minad/consult?tab=readme-ov-file#available-commands][a long list of available commands]], but this configuration mostly uses Consult for buffer switching with previews.

1. Replace ~switch-to-buffer~ (=C-x b=) with ~consult-buffer~:

  #+headers: :exports none
  #+headers: :noweb-ref consult-bind
  #+begin_src emacs-lisp
    ("C-x b" . consult-buffer)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x b") 'consult-buffer)
  #+end_src

  #+RESULTS:
  : consult-buffer

2. Replace ~project-switch-to-buffer~ (=C-x p b=) with ~consult-project-buffer~:

  #+headers: :exports none
  #+headers: :noweb-ref consult-bind
  #+begin_src emacs-lisp
    ("C-x p b" . consult-project-buffer)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x p b") 'consult-project-buffer)
  #+end_src

  #+RESULTS:
  : consult-project-buffer

3. Replace ~goto-line~ (=M-g g= and =M-g M-g=) with ~consult-goto-line~:

  #+headers: :exports none
  #+headers: :noweb-ref consult-bind
  #+begin_src emacs-lisp
    ("M-g g" . consult-goto-line)
    ("M-g M-g" . consult-goto-line)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "M-g g") 'consult-goto-line)
    (global-set-key (kbd "M-g M-g") 'consult-goto-line)
  #+end_src

  #+RESULTS:
  : consult-goto-line

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package consult
    :bind
    <<consult-bind>>)
#+end_src

#+RESULTS:
: t

** Pattern matching

[[https://github.com/oantolin/orderless][Orderless]] is a completion style that divides the search pattern in space-separated components, and matches regardless of their order.
After installing it, add it as a completion style by setting =completion-styles=:

#+headers: :exports none
#+headers: :noweb-ref orderless-custom
#+begin_src emacs-lisp
  completion-styles '(orderless basic)
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  (setq <<orderless-custom>>)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    <<orderless-custom>>)
#+end_src

** Minibuffer actions

[[https://github.com/oantolin/embark][Embark]] adds actions to minibuffer results.
For example, when switching buffers with =switch-to-buffer= or =consult-buffer=, pressing =C-.= opens Embark's list of key bindings.
From there, you can act on results in the minibuffer.
In this exampke, pressing =k= kills the currently selected buffer.

#+headers: :exports none
#+headers: :noweb-ref embark-bind
#+begin_src emacs-lisp
  ("C-." . embark-act)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-.") 'embark-act)
#+end_src

#+RESULTS:
: embark-act

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package embark
    :bind
    <<embark-bind>>)
#+end_src

#+RESULTS:
: embark-act

** Minibuffer history

Emacs' =savehist= feature saves minibuffer history to =~/emacs.d/history=.
The history is then used to order vertical completion suggestions.

#+headers: :noweb-ref savehist-init
#+begin_src emacs-lisp
  (savehist-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package savehist
    :init
    <<savehist-init>>)
#+end_src

#+RESULTS:

* Backups

Emacs automatically generates [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html][backups]] for files not stored in version control.
Instead of storing them in the files' directories, put everything in =~/.emacs.d/backups=:

#+headers: :exports none
#+headers: :noweb-ref files-custom
#+begin_src emacs-lisp
  backup-directory-alist `(("." . "~/.emacs.d/backups"))
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (setq <<files-custom>>)
#+end_src

#+RESULTS:
: ((. . ~/.emacs.d/backups))

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package files
    :custom
    <<files-custom>>)
#+end_src

#+RESULTS:
