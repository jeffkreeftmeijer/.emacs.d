#+title: Emacs configuration
#+author: Jeff Kreeftmeijer
#+PROPERTY: header-args :tangle default.el

* General editor configuration

** Hide scroll bars

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (scroll-bar-mode -1)
#+end_src

** Hide the tool bar

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (tool-bar-mode -1)
#+end_src

** Hide the menu bar

By default, Emacs shows the menu bar at the top of the screen, which is accessed by pressing =<F10>= in the Terminal.
To turn it off, set =menu-bar-mode= to a negative number:

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (menu-bar-mode -1)
#+end_src

** Use SF Mono as the default font

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (set-face-attribute 'default nil :font "SF Mono-15")
#+end_src

** Summary

#+begin_src emacs-lisp :noweb yes
  (use-package emacs
    :init
    <<general-options>>)
#+end_src

* Vim-style modal editing with Evil

[[https://github.com/emacs-evil/evil][Evil]] is a Vim emulator for that alters Emacs in a way that's familiar to Vim defectors.
I'm unablle to edit files without it, so it's the first thing I install.

Aside from Vim's modal editing through switching between different modes, Evil adds Ex commands like ~:w~ to save the current file, ~/~ to search, and ~:!~ to execute a shell command.
It's an impressively well functioning Vim emulator.[fn:evil]

After installing Evil, turn on =evil-mode= globally:

#+headers: :tangle no
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+end_src

[fn:evil] Although Evil definitely helped me transition to Emacs, I'd like to switch to a different modal editing solution at some point.
Because of Evil's stated purpose as a Vim emulator, it seems like a lot of well-functioning things are reimplemented because they work differently from Vim.
For example, Vim's Ex-style search is added, while Emacs provides a different search implementation through ~<C-s>~ that I don't know how to use.

** Modal editing everywhere

[[https://github.com/emacs-evil/evil-collection][Evil-collection]] adds Evil bindings Emacs features and external packages.

The evil-collection package needs Evil's key bindings to be disabled.
This needs to happen before /either/ of the packages is loaded.
To do that, add an src_emacs-lisp[:exports code]{:init} key to the Evil package declaration to execute before it's loaded:

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+end_src

Then, install evil-collection.
To defer loading, define commands in the package declaration.
The package will only be loaded when one of these functions is called:

#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :commands
    (evil-collection-eshell-setup evil-collection-magit-setup))
#+end_src

Finally, add Evil-collection by adding an after for each feature or package it provides key bindings for.
To keep the configuration modular, these declarations don't assume anything about the packages that are being configured, as setting package-specific configuration will happen later.

#+begin_src emacs-lisp
  (use-package eshell
    :defer t
    :config
    (evil-collection-eshell-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :config
    (evil-collection-magit-setup))
#+end_src

* Magit: an interface for working with Git repositories

[[https://magit.vc][Magit]] is the most comfortable way to use Git.[fn:magit]

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src

[fn:magit] I'm quite comfortable with Git's CLI in the terminal, so I held off on isntalling Magit even though I've used (and loved) it in the past.
Now, since I'm working on switching from running Emacs in the terminal to running a terminal in Emacs, I ran into the fact that Eshell can't handle Git's interactive modes because it's a dumb terminal.

* Vertical completions with Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode 1))
#+end_src

* Org-roam

[[https://github.com/org-roam/org-roam][Org-roam]] is a knowledge management system.
Install it, and configure the directory the package will store notes in:

#+name: org-roam-1
#+headers: :exports none
#+headers: :tangle no
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-directory (file-truename "~/notes"))
#+end_src

#+headers: :noweb yes
#+headers: :tangle no
#+begin_src emacs-lisp
  <<org-roam-1>>)
#+end_src

** Deferred loading

Defer loading Org-roam until the =org-roam-node-find= function is executed for the first time:

#+name: org-roam-2
#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle no
#+begin_src emacs-lisp
  <<org-roam-1>>
    :commands
    (org-roam-node-find)
#+end_src

#+headers: :noweb yes
#+headers: :tangle no
#+begin_src emacs-lisp
  <<org-roam-2>>)
#+end_src

** Sync automatically

Turn on automatic database syncing instead of manually running =org-roam-db-sync=:

#+headers: :noweb yes
#+begin_src emacs-lisp
  <<org-roam-2>>
    :config
    (org-roam-db-autosync-mode))
#+end_src

* Citeproc

For exporting Org documents with citations.
Org's built-in CSL citation processor depends on [[https://github.com/andras-simonyi/citeproc-el][citeproc-el]].
It checks if the package is available by checking the available features, so its loading can be deferred until it's needed:

#+begin_src emacs-lisp
  (use-package citeproc
    :ensure t
    :defer t)
#+end_src
