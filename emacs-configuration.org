# -*- eval: (add-hook 'after-save-hook #'org-babel-tangle); eval: (add-hook 'org-babel-post-tangle-hook #'delete-trailing-whitespace); -*-
#+title: ~/.emacs.d

* Packages

The following list of packages are added to Emacs through [[https://search.nixos.org/packages?channel=unstable][Nixpkgs' unstable channel]].
In turn, Nixpkgs gets the packages from their git repositories through their [[https://github.com/melpa/melpa/tree/master/recipes][Melpa recipes]].

- modus-themes

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.modus-themes
#+end_src

- spacious-padding

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.spacious-padding
#+end_src

- magit

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.magit
#+end_src

- evil

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.evil
#+end_src

- evil-collection

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.evil-collection
#+end_src

- evil-commentatry

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.evil-commentary
#+end_src

- vertico

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.vertico
#+end_src

- marginalia

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.marginalia
#+end_src

- consult

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.consult
#+end_src

- orderless

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.orderless
#+end_src

- embark

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.embark
#+end_src

- treesit-auto

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.treesit-auto
#+end_src

- dockerfile-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.dockerfile-mode
#+end_src

- elixir-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.elixir-mode
#+end_src

- git-modes

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.git-modes
#+end_src

- markdown-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.markdown-mode
#+end_src

- nix-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.nix-mode
#+end_src

- rust-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.rust-mode
#+end_src

- typescript-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.typescript-mode
#+end_src

- yaml-mode

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.yaml-mode
#+end_src

- direnv

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref packages
#+begin_src nix
  epkgs.direnv
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle configured-emacs.nix
#+begin_src nix
  { pkgs ? import <nixpkgs> {} }:

  let
    epkgs = pkgs.emacsPackages;
    emacsWithPackages = (pkgs.emacsPackagesFor pkgs.emacs).emacsWithPackages;

    default = epkgs.trivialBuild {
      pname = "default";
      src = pkgs.writeText "default.el" (builtins.readFile ./default.el);
      version = "0.1.0";
    };
  in
  emacsWithPackages [
    <<packages>>
    default
  ]
#+end_src

* Appearance

** Frames

Disable the scroll bar, the tool bar, and the menu bar:

#+headers: :noweb-ref frame-init
#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

#+RESULTS:

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package frame
    :init
    <<frame-init>>)
#+end_src

** Fonts

Use [[https://typeof.net/Iosevka/][Iosevka]] as a monospace font (/fixed/ in Emacs lingo), and Iosevka's "Aile" variant as a (quasi-)proportional font (/variable-pitch/ in Emacs lingo).

Both variants are used with their /regular/ weights, /expanded/ widths, and a height of 150 (15 points Ã— 10):

#+headers: :noweb-ref faces-init
#+begin_src emacs-lisp
  (defun jk/set-face-font (face family)
    (set-face-attribute
     face nil
     :family family :weight 'regular :width 'expanded :height 150))

    (jk/set-face-font 'default "Iosevka")
    (jk/set-face-font 'fixed-pitch "Iosevka")
    (jk/set-face-font 'variable-pitch "Iosevka Aile")
#+end_src

#+RESULTS:

The =face-font-family-alternatives= variable provides fallback fonts if the preferred fonts aren't available.
This produces a font list akin to CSS font-families, starting with the preferred font and falling back to an option that is most likely to be available on any system.
Having a list of fallback fonts like this removes the need to explicitly depend on fonts being available.

This configuration falls back to Apple's SF Mono and SF Pro if the Iosevka fonts aren't available.
Since the Apple fonts need to be downloaded explicitly, they aren't more likely to be there than the Iosevka ones, but they're included as they were the previous favorite.

If the SF fonts aren't available, the fixed font falls back to Menlo before the default monospace font (which is most likely Courier).
The variable pitch font falls back to SF Pro, Helvetica, and finally Arial:

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref faces-custom
#+begin_src emacs-lisp
  (face-font-family-alternatives
    '(("Iosevka" "SF Mono" "Menlo" "monospace")
      ("Iosevka Aile" "SF Pro" "Helvetica" "Arial")))
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (custom-set-variables
    '<<faces-custom>>)
#+end_src

#+RESULTS:

** Variable pitch

To use proportional fonts (as opposed to monospaced fonts) for non-code text, enable =variable-pitch-mode= for selected modes.
While this mode is enabled, the =default= font face inherits from =variable-pitch= instead of =fixed-pitch=.

An often-recommended approach is to hook into =text-mode=, which is the major mode most text-based modes inherit from:

#+headers: :eval no
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook #'variable-pitch-mode))
#+end_src

Doing so automatically enables =variable-pitch-mode= thenever =text-mode= is enabled.

This works, but it's a bit too eager for my liking.
The above configuration enables =variable-pitch-mode= when editing Org files, but also when writing commit messages and editing YAML files.
I consider text in the latter two as code, so I'd prefer to have those displayed in a monospace font.

Instead of hooking into =text-mode=, explicitly select the modes to use proportional fonts in Org and Markdown mode:

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'variable-pitch-mode)
  (add-hook 'markdown-mode-hook #'variable-pitch-mode)
#+end_src

#+RESULTS:
| variable-pitch-mode |

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref faces-hook
#+begin_src emacs-lisp
  (org-mode . variable-pitch-mode)
  (markdown-mode . variable-pitch-mode)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package faces
    :init
    <<faces-init>>
    :custom
    <<faces-custom>>
    :hook
    <<faces-hook>>)
#+end_src

#+RESULTS:
| variable-pitch-mode | text-mode-hook-identify |

** Themes

The [[https://protesilaos.com/emacs/modus-themes][Modus themes]] are a set of beautiful and customizable themes, which are shipped with Emacs since version 28.

The modus themes consist of two types: Modus Operandi is a light theme, and Modus Vivendi is its dark counterpart.
The tinted variants shift the background colors from white and black to a more pleasant light ochre and dark blue.

To select =modus-operandi-tinted= as the default theme, load it with the ~load-theme~ function:

#+headers: :noweb-ref modus-themes-init
#+begin_src emacs-lisp
  (load-theme 'modus-operandi-tinted)
#+end_src

#+RESULTS:
: t

An interactive function named ~modus-themes-toggle~ switches between the light and dark themes.
By default, the function switches between the non-tinted versions, but that can be overwritten to use the tinted versions through the =modus-themes-to-toggle= variable:

#+headers: :exports none
#+headers: :noweb-ref modus-themes-custom
#+begin_src emacs-lisp
  modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (setq <<modus-themes-custom>>)
#+end_src

#+RESULTS:
| modus-operandi-tinted | modus-vivendi-tinted |

*** Customization

The Modus themes can optionally inherit from the =fixed-pitch= face for some faces, which allows for turning on =variable-pitch-mode= while keeping some text monospaced.
To turn it on, set =modus-themes-mixed-fonts=, but make sure it's set before loading one of the modus themes:

#+name: modus-themes-mixed-fonts
#+headers: :exports none
#+headers: :noweb-ref modus-themes-customizations
#+begin_src emacs-lisp
  modus-themes-mixed-fonts t
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  (setq <<modus-themes-mixed-fonts>>)
#+end_src

The Modus themes come with the option to use italic and bold constructs, which is turned off by default.
Enabling produces italic type for comments and contextual information, and bold type in syntax highlighting.

#+name: modus-themes-italic-bold
#+headers: :exports none
#+headers: :noweb-ref modus-themes-customizations
#+begin_src emacs-lisp
  modus-themes-italic-constructs t
  modus-themes-bold-constructs t
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  (setq
   <<modus-themes-italic-bold>>)
#+end_src

Note that any configuration options to the themes themselves need to happen before the theme is loaded, or the theme needs to be reloaded through ~load-theme~ after setting the customizations.

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package modus-themes
    :init
    (setq
     <<modus-themes-customizations>>)
    <<modus-themes-init>>
    :custom
    <<modus-themes-custom>>)
#+end_src

#+RESULTS:

** Layout

The [[https://protesilaos.com/emacs/spacious-padding][spacious-padding]] package adds spacing around windows and frames, as well as padding the mode line.

Turn on =spacious-padding-mode= to add spacing around windows and frames:

#+headers: :noweb-ref spacious-padding-init
#+begin_src emacs-lisp
  (spacious-padding-mode 1)
#+end_src

Turn on  =spacious-padding-subtile-mode-line= for a more subtile mode line:

#+headers: :exports none
#+headers: :noweb-ref spacious-padding-custom
#+begin_src emacs-lisp
  spacious-padding-subtle-mode-line t
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  (setq <<spacious-padding-custom>>)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package spacious-padding
    :init
    <<spacious-padding-init>>
    :custom
    <<spacious-padding-custom>>)
#+end_src

#+RESULTS:

* Modal editing

** Evil mode

Emacs is the best Vim emulator, and [[https://github.com/emacs-evil/evil][Evil]] is the best Vim mode.
After installing Evil, turn on =evil-mode= globally:

#+headers: :noweb-ref evil-init
#+begin_src emacs-lisp
  (evil-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package evil
    :init
    <<evil-want-keybinding>>
    <<evil-init>>)
#+end_src

#+RESULTS:

** Evil-collection

For Vim-style key bindings to work everywhere (like magit, eshell, dired and [[https://github.com/emacs-evil/evil-collection/tree/master/modes][many more]]), add [[https://github.com/emacs-evil/evil-collection][evil-collection]].
Initialize it by calling ~evil-collection-init~:

#+headers: :noweb-ref evil-collection-config
#+begin_src emacs-lisp
  (evil-collection-init)
#+end_src

#+RESULTS:

Evil-collection [[https://github.com/emacs-evil/evil-collection/issues/60][requires =evil-want-keybinding= to be unset]] before either Evil or evil-collection are loaded:

#+headers: :noweb-ref evil-want-keybinding
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    <<evil-collection-config>>)
#+end_src

#+RESULTS:
: t

** Evil-commentary

[[https://github.com/linktohack/evil-commentary][Evil-commentary]] is an Evil port of [[https://github.com/tpope/vim-commentary][vim-commentary]] which adds key bindings to call Emacsâ€™ built in ~comment-or-uncomment-region~ function.
Turn it on by calling ~evil-commentary-mode~:

#+headers: :noweb-ref evil-commentary-init
#+begin_src emacs-lisp
  (evil-commentary-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package evil-commentary
    :after evil
    :init
    <<evil-commentary-init>>)
#+end_src

* Completion

** Vertical completion

[[https://github.com/minad/vertico][Vertico]] is a vertical completion library, based on Emacs' default completion system.

#+headers: :noweb-ref vertico-init
#+begin_src emacs-lisp
  (vertico-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package vertico
    :init
    <<vertico-init>>)
#+end_src

#+RESULTS:

** Contextual information

[[https://github.com/minad/marginalia][Marginalia]] adds extra contextual information to minibuffer completions.
For example, besides just showing command names when executing =M-x=, the package adds a description of the command and the key binding.

#+headers: :noweb-ref marginalia-init
#+begin_src emacs-lisp
  (marginalia-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package marginalia
    :init
    <<marginalia-init>>)
#+end_src

#+RESULTS:
: t

** Enhanced navigation commands

[[https://github.com/minad/consult][Consult]] provides enhancements to built-in search and navigation commands.
There is [[https://github.com/minad/consult?tab=readme-ov-file#available-commands][a long list of available commands]], but this configuration mostly uses Consult for buffer switching with previews.

1. Replace ~switch-to-buffer~ (=C-x b=) with ~consult-buffer~:

  #+headers: :exports none
  #+headers: :noweb-ref consult-bind
  #+begin_src emacs-lisp
    ("C-x b" . consult-buffer)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x b") 'consult-buffer)
  #+end_src

  #+RESULTS:
  : consult-buffer

2. Replace ~project-switch-to-buffer~ (=C-x p b=) with ~consult-project-buffer~:

  #+headers: :exports none
  #+headers: :noweb-ref consult-bind
  #+begin_src emacs-lisp
    ("C-x p b" . consult-project-buffer)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x p b") 'consult-project-buffer)
  #+end_src

  #+RESULTS:
  : consult-project-buffer

3. Replace ~goto-line~ (=M-g g= and =M-g M-g=) with ~consult-goto-line~:

  #+headers: :exports none
  #+headers: :noweb-ref consult-bind
  #+begin_src emacs-lisp
    ("M-g g" . consult-goto-line)
    ("M-g M-g" . consult-goto-line)
  #+end_src

  #+begin_src emacs-lisp
    (global-set-key (kbd "M-g g") 'consult-goto-line)
    (global-set-key (kbd "M-g M-g") 'consult-goto-line)
  #+end_src

  #+RESULTS:
  : consult-goto-line

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package consult
    :bind
    <<consult-bind>>)
#+end_src

#+RESULTS:
: t

** Pattern matching

[[https://github.com/oantolin/orderless][Orderless]] is a completion style that divides the search pattern in space-separated components, and matches regardless of their order.
After installing it, add it as a completion style by setting =completion-styles=:

#+headers: :exports none
#+headers: :noweb-ref orderless-custom
#+begin_src emacs-lisp
  completion-styles '(orderless basic)
#+end_src

#+headers: :noweb yes
#+begin_src emacs-lisp
  (setq <<orderless-custom>>)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    <<orderless-custom>>)
#+end_src

** Minibuffer actions

[[https://github.com/oantolin/embark][Embark]] adds actions to minibuffer results.
For example, when switching buffers with =switch-to-buffer= or =consult-buffer=, pressing =C-.= opens Embark's list of key bindings.
From there, you can act on results in the minibuffer.
In this exampke, pressing =k= kills the currently selected buffer.

#+headers: :exports none
#+headers: :noweb-ref embark-bind
#+begin_src emacs-lisp
  ("C-." . embark-act)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-.") 'embark-act)
#+end_src

#+RESULTS:
: embark-act

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package embark
    :bind
    <<embark-bind>>)
#+end_src

#+RESULTS:
: embark-act

** Minibuffer history

Emacs' =savehist= feature saves minibuffer history to =~/emacs.d/history=.
The history is then used to order vertical completion suggestions.

#+headers: :noweb-ref savehist-init
#+begin_src emacs-lisp
  (savehist-mode 1)
#+end_src

#+RESULTS:
: t

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package savehist
    :init
    <<savehist-init>>)
#+end_src

#+RESULTS:

* Development

** Major modes

The [[https://github.com/renzmann/treesit-auto][treesit-auto]] package automatically installs and uses the tree-sitter equivalent of installed major modes.
For example, it automatically installs and uses =rust-ts-mode= when a Rust file is opened and =rust-mode= is installed.

To turn it on globally, enable =global-treesit-auto-mode=:

#+headers: :noweb-ref treesit-auto-config
#+begin_src emacs-lisp
  (global-treesit-auto-mode 1)
#+end_src

#+RESULTS:
: t

To automatically install missing major modes, enable =treesit-auto-install=.
To have the package prompt before installing, set the variable to ='prompt=:

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref treesit-auto-custom
#+begin_src emacs-lisp
  (treesit-auto-install 'prompt)
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (custom-set-variables
    '<<treesit-auto-custom>>)
#+end_src

#+RESULTS:

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    <<treesit-auto-config>>
    :custom
    <<treesit-auto-custom>>)
#+end_src

#+RESULTS:
: t

** Environments

Programming environments set up with [[https://nixos.org][Nix]] and [[https://direnv.net][direnv]] alter the environment and available programs based on the current directory.
To provide access to programs on a per-directory level, use the [[https://github.com/wbolster/emacs-direnv][Emacs direnv package]]:

#+headers: :eval no
#+headers: :noweb-ref direnv-init
#+begin_src emacs-lisp
  (direnv-mode 1)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package direnv
    :init
    <<direnv-init>>)
#+end_src

#+RESULTS:

** Language servers

Eglot is Emacs' built-in Language Server Protocol client.
Language servers are added through the =eglot-server-programs= variable:

#+headers: :noweb-ref eglot-config
#+begin_src emacs-lisp
  (add-to-list 'eglot-server-programs '((rust-ts-mode rust-mode) "rust-analyzer"))
#+end_src

#+RESULTS:
#+begin_example
(((rust-ts-mode rust-mode) rust-analyzer) (rust-mode rust-analyzer) ((rust-ts-mode rust-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(rust-analyzer rls) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) ((cmake-mode cmake-ts-mode) cmake-language-server) (vimrc-mode vim-language-server --stdio) ((python-mode python-ts-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(pylsp pyls (pyright-langserver --stdio) jedi-language-server ruff-lsp) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) ((js-json-mode json-mode json-ts-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [((vscode-json-language-server --stdio) (vscode-json-languageserver --stdio) (json-languageserver --stdio)) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (((js-mode :language-id javascript) (js-ts-mode :language-id javascript) (tsx-ts-mode :language-id typescriptreact) (typescript-ts-mode :language-id typescript) (typescript-mode :language-id typescript)) typescript-language-server --stdio) ((bash-ts-mode sh-mode) bash-language-server start) ((php-mode phps-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [((phpactor language-server) (php vendor/felixfbecker/language-server/bin/php-language-server.php)) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) ((c-mode c-ts-mode c++-mode c++-ts-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(clangd ccls) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (((caml-mode :language-id ocaml) (tuareg-mode :language-id ocaml) reason-mode) ocamllsp) ((ruby-mode ruby-ts-mode) solargraph socket --port :autoport) (haskell-mode haskell-language-server-wrapper --lsp) (elm-mode elm-language-server) (mint-mode mint ls) (kotlin-mode kotlin-language-server) ((go-mode go-dot-mod-mode go-dot-work-mode go-ts-mode go-mod-ts-mode) gopls) ((R-mode ess-r-mode) R --slave -e languageserver::run()) ((java-mode java-ts-mode) jdtls) ((dart-mode dart-ts-mode) dart language-server --client-id emacs.eglot-dart) (elixir-mode language_server.sh) (ada-mode ada_language_server) (scala-mode . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(metals metals-emacs) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (racket-mode racket -l racket-langserver) ((tex-mode context-mode texinfo-mode bibtex-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(digestif texlab) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (erlang-mode erlang_ls --transport stdio) ((yaml-ts-mode yaml-mode) yaml-language-server --stdio) (nix-mode . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(nil rnix-lsp nixd) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (gdscript-mode localhost 6008) ((fortran-mode f90-mode) fortls) (futhark-mode futhark lsp) (lua-mode . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [(lua-language-server lua-lsp) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (zig-mode zls) ((css-mode css-ts-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [((vscode-css-language-server --stdio) (css-languageserver --stdio)) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (html-mode . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [((vscode-html-language-server --stdio) (html-languageserver --stdio)) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) ((dockerfile-mode dockerfile-ts-mode) docker-langserver --stdio) ((clojure-mode clojurescript-mode clojurec-mode) clojure-lsp) ((csharp-mode csharp-ts-mode) . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [((omnisharp -lsp) (csharp-ls)) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (purescript-mode purescript-language-server --stdio) ((perl-mode cperl-mode) perl -MPerl::LanguageServer -e Perl::LanguageServer::run) (markdown-mode . #[256 \300\301\211:\203" @\262<\203 \202 CB\262A\262\202 \211\237\266\203\302\203V \303\304"\305\301"\211A\203N \306\307\310\303\311"\301\312\301\211@@&\313#A\207\211@A\206U \301\207\301\211\211\312\301\211:\203\226 @\262\211A\262\242\262\314\312"\262\203\207 B\262\301\211\262\202\210 \312\203\226 A\262\301\262\202] \203\243 	!\266\301\207\207 [((marksman server) (vscode-markdown-language-server --stdio)) nil #[257 \300\301\302\303\304#"\207 [error None of '%s' are valid executables mapconcat car , ] 7

(fn LISTIFIED)] mapcar #[257 \300@\301"\211\205 @ABB\207 [eglot--executable-find t] 5

(fn A)] remove assoc completing-read [eglot] More than one server executable available:  car t equal eglot--executable-find] 14

(fn &optional INTERACTIVE)]) (graphviz-dot-mode dot-language-server --stdio) (terraform-mode terraform-ls serve) ((uiua-ts-mode uiua-mode) uiua lsp))
#+end_example

Start eglot automatically for Rust files:

#+begin_src emacs-lisp
  (add-hook 'rust-mode #'eglot-ensure))
  (add-hook 'rust-ts-mode #'eglot-ensure))
#+end_src

#+headers: :eval no
#+headers: :exports none
#+headers: :noweb-ref eglot-hook
#+begin_src emacs-lisp
  (rust-mode . eglot-ensure)
  (rust-ts-mode . eglot-ensure)
#+end_src

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package eglot
    :config
    <<eglot-config>>
    :hook
    <<eglot-hook>>)
#+end_src

* Backups

Emacs automatically generates [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html][backups]] for files not stored in version control.
Instead of storing them in the files' directories, put everything in =~/.emacs.d/backups=:

#+headers: :exports none
#+headers: :noweb-ref files-custom
#+begin_src emacs-lisp
  backup-directory-alist `(("." . "~/.emacs.d/backups"))
#+end_src

#+headers: :noweb yes
#+headers: :noweb-prefix no
#+begin_src emacs-lisp
  (setq <<files-custom>>)
#+end_src

#+RESULTS:
: ((. . ~/.emacs.d/backups))

#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle default.el
#+begin_src emacs-lisp
  (use-package files
    :custom
    <<files-custom>>)
#+end_src

#+RESULTS:
