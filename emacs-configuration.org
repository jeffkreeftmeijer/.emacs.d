#+title: Emacs configuration
#+author: Jeff Kreeftmeijer
#+PROPERTY: header-args :tangle default.el

* General editor configuration

** Hide scroll bars

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (scroll-bar-mode -1)
#+end_src

** Hide the tool bar

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (tool-bar-mode -1)
#+end_src

** Hide the menu bar

By default, Emacs shows the menu bar at the top of the screen, which is accessed by pressing =<F10>= in the Terminal.
To turn it off, set =menu-bar-mode= to a negative number:

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (menu-bar-mode -1)
#+end_src

** Remove the scratch buffer message

The scratch buffer has a helpful comment at the top:

#+begin_example
;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.
#+end_example

To start with an empty scratch buffer, set =initial-scratch-message=:

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (setq initial-scratch-message nil)
#+end_src

** No tabs

By default, Erlang uses tabs for indentation.
Use spaces instead:

#+begin_src emacs-lisp :tangle no :noweb-ref general-options
  (indent-tabs-mode nil)
#+end_src

** Summary

#+begin_src emacs-lisp :noweb yes
  (use-package emacs
    :init
    <<general-options>>)
#+end_src

** Helpful

[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to Emacs' built-in help, with more contextual information.
Install the package and replace the default describe functions' bindings:

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :init
    (require 'bind-key)
    :bind
    (("C-h f" . helpful-callable)  ; Replace describe-function
     ("C-h v" . helpful-variable)  ; Replace describe-variable
     ("C-h k" . helpful-key)       ; Replace describe-key
     ("C-h x" . helpful-command))) ; Replace describe-command
#+end_src

* Configuring Emacs' appearance

** Font

Increase the font size to 14 points by setting the =:height= attribute through =set-face-attribute=:

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (set-face-attribute 'default nil :height 140))
#+end_src

#+RESULTS:

** The Modus Themes

The [[https://protesilaos.com/emacs/modus-themes][Modus themes]] are a set of beautiful and customizable themes, which are shipped with Emacs since version 28.
A recent version of the themes is installed through use-package:[fn:patch]

#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t)
#+end_src

The modus themes consist of two types: Modus Operandi is a light theme, and Modus Vivendi is its dark counterpart.
The tinted variants shift the background colors from white and black to a more pleasant light ochre and dark blue.

To select =modus-operandi-tinted= as the default theme, load it with the ~load-theme~ function:

#+begin_src emacs-lisp :noweb-ref theme-init :tangle no
  (load-theme 'modus-operandi-tinted)
#+end_src

An interactive function named =modus-themes-toggle= switches between the light and dark themes.
By default, the function switches between the non-tinted versions, but that can be overwritten to use the tinted versions through the =modus-themes-to-toggle= variable:

#+name: themes-to-toggle
#+begin_src emacs-lisp :noweb-ref theme-config :exports none :tangle no
  modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
#+end_src

#+begin_src emacs-lisp :noweb yes :tangle no
  (setq <<themes-to-toggle>>)
#+end_src

To switch to Modus Operandi and configure Modus Vivendi to toggle:

#+begin_src emacs-lisp :noweb yes
  (use-package emacs
    :init
    <<theme-init>>
    :custom
    <<theme-config>>)
#+end_src

[fn:patch] Although they're included in my version of Emacs, I install the latest version because it includes [[https://git.sr.ht/~protesilaos/modus-themes/commit/ede2ab0e0ff43b25fdac24a9946a95be705eff95][this patch]], which fixes a typo I ran into while generating style sheets with ~M-x org-html-htmlize-generate-css~.
Outside of this I wouldn't install a newer version of the themes, as I don't need to be on the bleeding edge because I use a very simple theme configuration.

** Auto-dark

[[https://github.com/LionyxML/auto-dark-emacs][Auto-dark]] automatically switches between dark and light themes based on the operating system's appearance.
After loading it, it's turned on by switching on =auto-dark-mode=.
It uses the /wombat/ and /leuven/ themes by default, but these are configured to use the modus themes with the ~auto-dark-light-theme~ and ~auto-dark-dark-theme~ variables:

#+begin_src emacs-lisp
  (use-package auto-dark
    :ensure t
    :config
    (auto-dark-mode t)
    :custom
    (auto-dark-light-theme 'modus-operandi-tinted)
    (auto-dark-dark-theme 'modus-vivendi-tinted))
#+end_src

* Vim-style modal editing with Evil

[[https://github.com/emacs-evil/evil][Evil]] is a Vim emulator for that alters Emacs in a way that's familiar to Vim defectors.
I'm unable to edit files without it, so it's the first thing I install.

Aside from Vim's modal editing through switching between different modes, Evil adds Ex commands like ~:w~ to save the current file, ~/~ to search, and ~:!~ to execute a shell command.
It's an impressively well functioning Vim emulator.[fn:evil]

After installing Evil, turn on =evil-mode= globally:

#+headers: :tangle no
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+end_src

[fn:evil] Although Evil definitely helped me transition to Emacs, I'd like to switch to a different modal editing solution at some point.
Because of Evil's stated purpose as a Vim emulator, it seems like a lot of well-functioning things are reimplemented because they work differently from Vim.
For example, Vim's Ex-style search is added, while Emacs provides a different search implementation through ~<C-s>~ that I don't know how to use.


[[https://github.com/linktohack/evil-commentary][Evil-commentary]] is an Emacs port of [[https://github.com/tpope/vim-commentary][vim-commentary]] which adds key bindings to call Emacs' built in =comment-or-uncomment-region= function:

#+begin_quote
1. =g c c= comments out a line (takes a count)
2. =g p= comments out the target of a motion, e.g. =g c a p= to comment out a paragraph (normal state) and =g c= to comment out the selection (visual state).
#+end_quote

#+begin_src emacs-lisp
  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-commentary-mode))
#+end_src

[[https://github.com/emacs-evil/evil-collection][Evil-collection]] adds Evil bindings Emacs features and external packages.
+It adds Vim's key bindings to built-in Emacs features like Dired and Eshell, but also to external packages like Magit and Vertico.

The evil-collection package needs Evil's key bindings to be disabled.
This needs to happen before /either/ of the packages is loaded.
To do that, add an src_emacs-lisp[:exports code]{:init} key to the Evil package declaration to execute before it's loaded:

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+end_src

Then, install evil-collection.
To defer loading, define commands in the package declaration.
The package will only be loaded when one of these functions is called:

#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure t
    :commands
    (evil-collection-corfu-setup
     evil-collection-dired-setup
     evil-collection-eshell-setup
     evil-collection-magit-setup
     evil-collection-org-setup
     evil-collection-org-roam-setup
     evil-collection-vertico-setup))
#+end_src

Now, when loading the configuration file, each evil-collection setup function is deferred until its needed.
For example, the =evil-collection-vertico-setup= function isn't called until Vertico is loaded, which needs to happen elsewhere in the configuration.

Finally, add Evil-collection by adding an after for each feature or package it provides key bindings for.
To keep the configuration modular, these declarations don't assume anything about the packages that are being configured, as setting package-specific configuration will happen later.

#+begin_src emacs-lisp
  (use-package corfu
    :defer t
    :config
    (evil-collection-corfu-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package dired
    :defer t
    :config
    (evil-collection-dired-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package eshell
    :defer t
    :config
    (evil-collection-eshell-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package org
    :defer t
    :config
    (evil-collection-org-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package org-roam
    :defer t
    :config
    (evil-collection-org-roam-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :defer t
    :config
    (evil-collection-magit-setup))
#+end_src

#+begin_src emacs-lisp
  (use-package vertico
    :defer t
    :config
    (evil-collection-vertico-setup))
#+end_src

* Magit: an interface for working with Git repositories

[[https://magit.vc][Magit]] is the most comfortable way to use Git.[fn:magit]

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t)
#+end_src

[fn:magit] I'm quite comfortable with Git's CLI in the terminal, so I held off on isntalling Magit even though I've used (and loved) it in the past.
Now, since I'm working on switching from running Emacs in the terminal to running a terminal in Emacs, I ran into the fact that Eshell can't handle Git's interactive modes because it's a dumb terminal.

** Forge

#+begin_src emacs-lisp
  (use-package forge
    :ensure t
    :after magit)
#+end_src

* Vertical completions with Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode 1))
#+end_src

** History-aware completions

#+begin_src emacs-lisp
  (use-package savehist
    :init
    (savehist-mode 1))
#+end_src

** Extra information about completion options

[[https://github.com/minad/marginalia][Marginalia]] is an extension for Vertico that shows extra information about the displayed completion options.

#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :after vertico
    :init
    (marginalia-mode))
#+end_src

** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic)))
#+end_src

** Consult

[[https://github.com/minad/consult][Consult]] adds extra search navigation commands to be used with the Emacs' own completing-read, Vertico, or other completion systems.
Its functions can be used as drop-in replacements for built-in functionality.

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :init
    (require 'bind-key)
    :bind
    (("C-x p b" . consult-project-buffer))) ; Replace project-switch-to-buffer
#+end_src

* Completion at point with Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode)
    (corfu-history-mode)
    :custom
    (corfu-auto t))
#+end_src

* Language modes

Major modes for programming language support automatically add themselves to =auto-mode-alist=, which is a list of file name patterns.
An example of an item from the default list links the =.el= file extension to =emacs-lisp-mode=:

#+headers: :tangle no
#+begin_src emacs-lisp
  ("\\.el\\'" . emacs-lisp-mode)
#+end_src

When a filename matches an item in this list, the corresponding major mode is enabled automatically.
Because of that, loading the packages can be deferred until that happens with use-package's =:defer= option.
To ensure the packages aren't loaded before they're needed, a message is added to each definition's =:config= key, which prints a message whenever the package is loaded.

#+begin_src emacs-lisp
  (use-package elixir-mode
    :config (message "Loaded elixir-mode")
    :defer t
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode
    :config (message "Loaded markdown-mode")
    :defer t
    :ensure t
    :mode ("\\.mdx\\'" . markdown-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package nix-mode
    :config (message "Loaded nix-mode")
    :defer t
    :ensure t)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  (use-package rust-mode
    :config (message "Loaded rust-mode")
    :defer t
    :ensure t)
#+end_src

* Org-babel

[[https://orgmode.org/worg/org-contrib/babel/][Org-babel]] executes source code within Org documents.
It only supports Emacs Lisp by default, but more languages are added to =org-babel-load-languages=:

#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (org-babel-load-languages '((emacs-lisp . t)
				(shell . t))))
#+end_src

* Ob-async

By default, Org Babel executes blocks synchronously, blocking the editor while code blocks are run.
The [[https://github.com/astahlman/ob-async][ob-async]] package adds the =:async= keyword to code blocks:

#+headers: :tangle no
#+begin_src org
  ,#+begin_src sh :async
    sleep 3 && echo 'Done!'
  ,#+end_src
#+end_src

Evaluating this code block inserts a placeholder results block and gives control back to the user:

#+headers: :tangle no
#+begin_src org
  ,#+RESULTS:
  : 5ade6e774c96f03e53840b9acc89f9f4
#+end_src

When the evaluation is done, the placeholder is replaced with the actual results:

#+headers: :tangle no
#+begin_src org
  ,#+RESULTS:
  : Done!
#+end_src

Ob-async is available on MELPA, so it's installed through =use-package=:

#+begin_src emacs-lisp
  (use-package ob-async
    :ensure t)
#+end_src

* Org-auto-tangle

[[https://github.com/yilkalargaw/org-auto-tangle][Org-auto-tangle]] automatically tangles Org files on save.

Be default, it only auto-tangles files marked with the =#+auto_tangle= header option.
By turning on =org-auto-tangle-default=, org-auto-tangle tangles all Org files, even without that option.

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :ensure t
    :hook
    (org-mode . org-auto-tangle-mode)
    :custom
    (org-auto-tangle-default t))
#+end_src

* Org-roam

[[https://github.com/org-roam/org-roam][Org-roam]] is a knowledge management system.
Install it, and configure the directory the package will store notes in:

#+name: org-roam-1
#+headers: :exports none
#+headers: :tangle no
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-directory (file-truename "~/notes"))
#+end_src

#+headers: :noweb yes
#+headers: :tangle no
#+begin_src emacs-lisp
  <<org-roam-1>>)
#+end_src

** Deferred loading

Defer loading Org-roam until the =org-roam-node-find= function is executed for the first time:

#+name: org-roam-2
#+headers: :exports none
#+headers: :noweb yes
#+headers: :tangle no
#+begin_src emacs-lisp
  <<org-roam-1>>
    :commands
    (org-roam-node-find)
#+end_src

#+headers: :noweb yes
#+headers: :tangle no
#+begin_src emacs-lisp
  <<org-roam-2>>)
#+end_src

** Sync automatically

Turn on automatic database syncing instead of manually running =org-roam-db-sync=:

#+headers: :noweb yes
#+begin_src emacs-lisp
  <<org-roam-2>>
    :config
    (org-roam-db-autosync-mode))
#+end_src

* Org-roam-ui

[[https://github.com/org-roam/org-roam-ui][Org-roam-ui]] is a graphical frontend for org-roam.

#+begin_src emacs-lisp
  (use-package org-roam-ui
    :ensure t
    :commands
    org-roam-ui-mode)
#+end_src

* Ox-gfm

[[https://github.com/larstvei/ox-gfm][Ox-gfm]] is a Markdown exporter for Org mode, which produces /Github Flavored Markdown/, for generating repository READMEs.

#+begin_src emacs-lisp
  (use-package ox-gfm
    :ensure t
    :commands
    org-gfm-export-as-markdown
    org-gfm-convert-region-to-md
    org-gfm-export-to-markdown
    org-gfm-publish-to-gfm)

#+end_src

* Elixir-ls

#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :hook
    (elixir-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(elixir-mode "elixir-ls")))
#+end_src

* exec-path-from-shell

Make sure the =$PATH= is set up correctly within Emacs.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (exec-path-from-shell-initialize))
#+end_src

* direnv

#+begin_src emacs-lisp
  (use-package direnv
    :ensure t
    :config
    (direnv-mode))
#+end_src
