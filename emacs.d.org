#+title: ~/.emacs.d
#+export_file_name: README

* Package management
:PROPERTIES:
:CUSTOM_ID: package-management
:END:

  [[https://github.com/raxod502/straight.el][=straight.el=]] is a package manager for Emacs that locks package versions and downloads packages from Git repositories.
  The [[https://github.com/raxod502/straight.el#getting-started][Getting started]] section in its README provides the bootstrap code to place inside =init.el=:

  #+begin_src emacs-lisp :tangle init.el
    ;; Package management: straight.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

  To disable =package.el= (Emacs' default package manager) in favor of using =straight.el=, turn off =package-enable-at-startup= in =early-init.el=:

  #+begin_src emacs-lisp :tangle early-init.el
    ;; Disable package.el in favor of straight.el
    (setq package-enable-at-startup nil)
  #+end_src

  To install a package for the current session, execute the =straight-use-package= command:

  #+begin_example
    M-x straight-use-package <RET> evil <RET>
  #+end_example

  To continue using the package in future sessions, add the =straight-use-package= call to =~/.emacs/init.el=:

  #+begin_src emacs-lisp
    (straight-use-package 'evil)
  #+end_src

* Evil
:PROPERTIES:
:CUSTOM_ID: evil
:END:

  [[https://github.com/emacs-evil/evil][Evil]] is a Vim emulator for emacs.
  Install it with =straight.el=, and turn =evil-mode= on:

  #+begin_src emacs-lisp :tangle init.el
    ;; Vim emulation: evil
    (straight-use-package 'evil)
    (evil-mode 1)
  #+end_src

** "Fix" the tab key for visibility cycling in Org and Evil mode
:PROPERTIES:
:CUSTOM_ID: evil-org-tab
:END:
   #+include: "emacs-evil-org-tab.org" :lines "8-23" :only-contents t

   # NOTE: This block was copied in from emacs-evil-org-tab.org to make it tangle to init.el.
   #+caption: =~/emacs.d/early-init.el=
   #+begin_src emacs-lisp :tangle early-init.el
     ;; Disable C-i to jump forward to restore TAB functionality in Org mode.
     (setq evil-want-C-i-jump nil)
   #+end_src

** Evil collection
:PROPERTIES:
:CUSTOM_ID: evil-collection
:END:

   [[https://github.com/emacs-evil/evil-collection][Evil collection]] is a collection of bindings for plugins.

   It replaces Evil's =evil-integration=, which should be turned off through the =evil-want-keybinding= option before Evil collection is loaded[fn:evil-integration-warning].

   #+begin_src emacs-lisp :tangle init.el
     ;; Vim bindings for plugins: evil-collection
     (straight-use-package 'evil-collection)
     (setq evil-want-keybinding nil)
     (evil-collection-init)
   #+end_src

[fn:evil-integration-warning] Evil collection prints a warning if it's loaded without =evil-want-keybinding= turned off:

#+begin_example
Warning (evil-collection): Make sure to set `evil-want-keybinding' to nil before loading evil or evil-collection.

See https://github.com/emacs-evil/evil-collection/issues/60 for more details.
#+end_example

* Org-mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:

[[https://github.com/larstvei/ox-gfm][ox-gfm]] is an Org export backend for GitHub-flavored Markdown.

#+begin_src emacs-lisp :tangle init.el
  ;; GitHub-flavored Markdown Org exporter: ox-gfm
  (straight-use-package 'ox-gfm)
#+end_src

** Org Roam
:PROPERTIES:
:CUSTOM_ID: org-roam
:END:

  [[https://github.com/org-roam/org-roam][Org-roam]] is a knowledge management system.
  Set the directory for notes to =~/notes=.

  #+begin_src emacs-lisp :tangle init.el
    ;; Org-roam
    (straight-use-package 'org-roam)
    (setq org-roam-directory (file-truename "~/notes"))
  #+end_src

** Org Babel
:PROPERTIES:
:CUSTOM_ID: org-babel
:END:

   Add "shell" to Babel's code execution languages.

   #+begin_src emacs-lisp :tangle init.el
     ;; Add "shell" to Babel's code execution languages.
     (org-babel-do-load-languages 'org-babel-load-languages '((shell . t)))
   #+end_src

* Flyspell
:PROPERTIES:
:CUSTOM_ID: flyspell
:END:

  [[https://www.emacswiki.org/emacs/FlySpell][Flyspell]] is a minor mode that enables on-the-fly spell checking.
  It uses [[http://aspell.net][GNU aspell]], which is installed via Homebrew:

  #+begin_src shell
    brew install aspell
  #+end_src

  To enable Flyspell in text-mode, add a hook:

  #+begin_src emacs-lisp :tangle init.el
    ;; Spell checking: Flyspell
    (add-hook 'text-mode-hook 'flyspell-mode)
  #+end_src

* Magit
:PROPERTIES:
:CUSTOM_ID: magit
:END:

  [[https://magit.vc][Magit]] is an interface to Git.

  #+begin_src emacs-lisp :tangle init.el
    ;; Git: magit
    (straight-use-package 'magit)
  #+end_src

* Elixir
:PROPERTIES:
:CUSTOM_ID: elixir
:END:

  #+begin_src emacs-lisp :tangle init.el
    ;; Elixir: elixir-mode
    (straight-use-package 'elixir-mode)
  #+end_src

  Automatically format Elixir files on save.

  #+begin_src emacs-lisp :tangle init.el
    ;; Format Elixir files on save
    (add-hook 'elixir-mode-hook
	      (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
  #+end_src

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-gfm-export-to-markdown)) nil t)
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
